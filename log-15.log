====================
Type='PASS_NULLABLE', message='passing @Nullable parameter 'this.loggingSystem' where @NonNull is required'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java:304
		initializeSystem(environment, this.loggingSystem, this.logFile);
Log:
15:39:26.102 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
15:39:26.103 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
15:39:26.103 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
15:39:26.103 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
15:39:26.103 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
15 : TOP LEVEL CALL TO FIX ERROR: Type='PASS_NULLABLE', message='passing @Nullable parameter 'this.loggingSystem' where @NonNull is required'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java:304
		initializeSystem(environment, this.loggingSystem, this.logFile);
15:39:33.840 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "PASS_NULLABLE" and the full error message is: "passing @Nullable parameter 'this.loggingSystem' where @NonNull is required".
The line with the error is: "		initializeSystem(environment, this.loggingSystem, this.logFile);".

The error is within "the method: initialize(org.springframework.core.env.ConfigurableEnvironment,java.lang.ClassLoader)" and the code surrounding the error is:
```java

	private void onApplicationFailedEvent() {
		cleanupLoggingSystem();
	}

	/**
	 * Initialize the logging system according to preferences expressed through the
	 * {@link Environment} and the classpath.
	 * @param environment the environment
	 * @param classLoader the classloader
	 */
	@Initializer
	protected void initialize(ConfigurableEnvironment environment, ClassLoader classLoader) {
		getLoggingSystemProperties(environment).apply();
		this.logFile = LogFile.get(environment);
		if (this.logFile != null) {
			this.logFile.applyToSystemProperties();
		}
		this.loggerGroups = new LoggerGroups(DEFAULT_GROUP_LOGGERS);
		initializeEarlyLoggingLevel(environment);
		initializeSystem(environment, this.loggingSystem, this.logFile);
		initializeFinalLoggingLevels(environment, this.loggingSystem);
		registerShutdownHookIfNecessary(environment, this.loggingSystem);
	}

	private LoggingSystemProperties getLoggingSystemProperties(ConfigurableEnvironment environment) {
		return (this.loggingSystem != null) ? this.loggingSystem.getSystemProperties(environment)
				: new LoggingSystemProperties(environment);
	}

	private void initializeEarlyLoggingLevel(ConfigurableEnvironment environment) {
		if (this.parseArgs && this.springBootLogging == null) {
			if (isSet(environment, "debug")) {
				this.springBootLogging = LogLevel.DEBUG;
			}
			if (isSet(environment, "trace")) {
				this.springBootLogging = LogLevel.TRACE;
			}
		}
	}
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "initialize(org.springframework.core.env.ConfigurableEnvironment,java.lang.ClassLoader)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

15:39:33.840 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
15:39:33.840 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected void initialize(ConfigurableEnvironment environment, ClassLoader classLoader) {
      getLoggingSystemProperties(environment).apply();
      this.logFile = LogFile.get(environment);
      if (this.logFile != null) {
          this.logFile.applyToSystemProperties();
      }
      this.loggerGroups = new LoggerGroups(DEFAULT_GROUP_LOGGERS);
      initializeEarlyLoggingLevel(environment);
      if (this.loggingSystem != null) {
          initializeSystem(environment, this.loggingSystem, this.logFile);
          initializeFinalLoggingLevels(environment, this.loggingSystem);
          registerShutdownHookIfNecessary(environment, this.loggingSystem);
      }
  }
  ```
    ]]>
  </code>
</response>
15:39:33.841 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected void initialize(ConfigurableEnvironment environment, ClassLoader classLoader) {
      getLoggingSystemProperties(environment).apply();
      this.logFile = LogFile.get(environment);
      if (this.logFile != null) {
          this.logFile.applyToSystemProperties();
      }
      this.loggerGroups = new LoggerGroups(DEFAULT_GROUP_LOGGERS);
      initializeEarlyLoggingLevel(environment);
      if (this.loggingSystem != null) {
          initializeSystem(environment, this.loggingSystem, this.logFile);
          initializeFinalLoggingLevels(environment, this.loggingSystem);
          registerShutdownHookIfNecessary(environment, this.loggingSystem);
      }
  }
  ```
    ]]>
  </code>
</response>
15:39:33.842 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
protected void initialize(ConfigurableEnvironment environment, ClassLoader classLoader) {
      getLoggingSystemProperties(environment).apply();
      this.logFile = LogFile.get(environment);
      if (this.logFile != null) {
          this.logFile.applyToSystemProperties();
      }
      this.loggerGroups = new LoggerGroups(DEFAULT_GROUP_LOGGERS);
      initializeEarlyLoggingLevel(environment);
      if (this.loggingSystem != null) {
          initializeSystem(environment, this.loggingSystem, this.logFile);
          initializeFinalLoggingLevels(environment, this.loggingSystem);
          registerShutdownHookIfNecessary(environment, this.loggingSystem);
      }
  }
