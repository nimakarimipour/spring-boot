====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression loggingSystem is @Nullable'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java:429
			Runnable shutdownHandler = loggingSystem.getShutdownHandler();
Log:
15:40:15.671 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
15:40:15.671 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
15:40:15.671 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
15:40:15.671 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
15:40:15.671 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
19 : TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression loggingSystem is @Nullable'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java:429
			Runnable shutdownHandler = loggingSystem.getShutdownHandler();
15:40:23.427 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression loggingSystem is @Nullable".
The line with the error is: "			Runnable shutdownHandler = loggingSystem.getShutdownHandler();".

The error is within "the method: registerShutdownHookIfNecessary(org.springframework.core.env.Environment,org.springframework.boot.logging.LoggingSystem)" and the code surrounding the error is:
```java
				return;
			}
		}
		configurer.accept(name, level);
	}

	private BiConsumer<String, LogLevel> getLogLevelConfigurer(@Nullable LoggingSystem system) {
		return (name, level) -> {
			try {
				name = name.equalsIgnoreCase(LoggingSystem.ROOT_LOGGER_NAME) ? null : name;
				system.setLogLevel(name, level);
			}
			catch (RuntimeException ex) {
				this.logger.error(LogMessage.format("Cannot set level '%s' for '%s'", level, name));
			}
		};
	}

	private void registerShutdownHookIfNecessary(Environment environment, @Nullable LoggingSystem loggingSystem) {
		if (environment.getProperty(REGISTER_SHUTDOWN_HOOK_PROPERTY, Boolean.class, true)) {
			Runnable shutdownHandler = loggingSystem.getShutdownHandler();
			if (shutdownHandler != null && shutdownHookRegistered.compareAndSet(false, true)) {
				registerShutdownHook(shutdownHandler);
			}
		}
	}

	void registerShutdownHook(Runnable shutdownHandler) {
		SpringApplication.getShutdownHandlers().add(shutdownHandler);
	}

	public void setOrder(int order) {
		this.order = order;
	}

	@Override
	public int getOrder() {
		return this.order;
	}

```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "registerShutdownHookIfNecessary(org.springframework.core.env.Environment,org.springframework.boot.logging.LoggingSystem)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

15:40:23.427 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
15:40:23.427 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private void registerShutdownHookIfNecessary(Environment environment, LoggingSystem loggingSystem) {
      if (loggingSystem != null && environment.getProperty(REGISTER_SHUTDOWN_HOOK_PROPERTY, Boolean.class, true)) {
          Runnable shutdownHandler = loggingSystem.getShutdownHandler();
          if (shutdownHandler != null && shutdownHookRegistered.compareAndSet(false, true)) {
              registerShutdownHook(shutdownHandler);
          }
      }
  }
  ```
    ]]>
  </code>
</response>
```
15:40:23.428 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private void registerShutdownHookIfNecessary(Environment environment, LoggingSystem loggingSystem) {
      if (loggingSystem != null && environment.getProperty(REGISTER_SHUTDOWN_HOOK_PROPERTY, Boolean.class, true)) {
          Runnable shutdownHandler = loggingSystem.getShutdownHandler();
          if (shutdownHandler != null && shutdownHookRegistered.compareAndSet(false, true)) {
              registerShutdownHook(shutdownHandler);
          }
      }
  }
  ```
    ]]>
  </code>
</response>
```
15:40:23.429 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
private void registerShutdownHookIfNecessary(Environment environment, LoggingSystem loggingSystem) {
      if (loggingSystem != null && environment.getProperty(REGISTER_SHUTDOWN_HOOK_PROPERTY, Boolean.class, true)) {
          Runnable shutdownHandler = loggingSystem.getShutdownHandler();
          if (shutdownHandler != null && shutdownHookRegistered.compareAndSet(false, true)) {
              registerShutdownHook(shutdownHandler);
          }
      }
  }
