====================
Type='PASS_NULLABLE', message='passing @Nullable parameter 'convertFromString(value)' where @NonNull is required'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceBuilder.java:502
				this.setter.set(dataSource, convertFromString(value));
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='PASS_NULLABLE', message='passing @Nullable parameter 'convertFromString(value)' where @NonNull is required'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceBuilder.java:502
				this.setter.set(dataSource, convertFromString(value));
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "PASS_NULLABLE" and the full error message is: "passing @Nullable parameter 'convertFromString(value)' where @NonNull is required".
The line with the error is: "				this.setter.set(dataSource, convertFromString(value));".

The error is within "the method: set(T,java.lang.String)" and the code surrounding the error is:
```java
		@Nullable
		private final Getter<T, V> getter;

		private final Setter<T, V> setter;

		MappedDataSourceProperty(DataSourceProperty property, Class<V> type, @Nullable Getter<T, V> getter,
				Setter<T, V> setter) {
			this.property = property;
			this.type = type;
			this.getter = getter;
			this.setter = setter;
		}

		void set(T dataSource, @Nullable String value) {
			try {
				if (this.setter == null) {
					UnsupportedDataSourcePropertyException.throwIf(!this.property.isOptional(),
							() -> "No setter mapped for '" + this.property + "' property");
					return;
				}
				this.setter.set(dataSource, convertFromString(value));
			}
			catch (SQLException ex) {
				throw new IllegalStateException(ex);
			}
		}

		@Nullable
		String get(@Nullable T dataSource) {
			try {
				if (this.getter == null) {
					UnsupportedDataSourcePropertyException.throwIf(!this.property.isOptional(),
							() -> "No getter mapped for '" + this.property + "' property");
					return null;
				}
				return convertToString(this.getter.get(dataSource));
			}
			catch (SQLException ex) {
				throw new IllegalStateException(ex);
			}
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "set(T,java.lang.String)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  void set(T dataSource, String value) {
      try {
          if (this.setter == null) {
              UnsupportedDataSourcePropertyException.throwIf(!this.property.isOptional(),
                      () -> "No setter mapped for '" + this.property + "' property");
              return;
          }
          V convertedValue = convertFromString(value);
          if (convertedValue != null) {
              this.setter.set(dataSource, convertedValue);
          }
      }
      catch (SQLException ex) {
          throw new IllegalStateException(ex);
      }
  }
  ```
  ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
void set(T dataSource, String value) {
      try {
          if (this.setter == null) {
              UnsupportedDataSourcePropertyException.throwIf(!this.property.isOptional(),
                      () -> "No setter mapped for '" + this.property + "' property");
              return;
          }
          V convertedValue = convertFromString(value);
          if (convertedValue != null) {
              this.setter.set(dataSource, convertedValue);
          }
      }
      catch (SQLException ex) {
          throw new IllegalStateException(ex);
      }
  }
