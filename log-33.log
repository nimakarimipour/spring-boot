====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression optionsCapable is @Nullable'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/r2dbc/EmbeddedDatabaseConnection.java:112
		ConnectionFactoryOptions options = optionsCapable.getOptions();
Log:
15:43:03.802 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
15:43:03.802 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
15:43:03.802 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
15:43:03.802 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
15:43:03.802 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
33 : TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression optionsCapable is @Nullable'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/r2dbc/EmbeddedDatabaseConnection.java:112
		ConnectionFactoryOptions options = optionsCapable.getOptions();
15:43:11.879 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression optionsCapable is @Nullable".
The line with the error is: "		ConnectionFactoryOptions options = optionsCapable.getOptions();".

The error is within "the method: isEmbedded(io.r2dbc.spi.ConnectionFactory)" and the code surrounding the error is:
```java
			if (candidate != NONE && ClassUtils.isPresent(candidate.getDriverClassName(), classLoader)) {
				return candidate;
			}
		}
		return NONE;
	}

	/**
	 * Convenience method to determine if a given connection factory represents an
	 * embedded database type.
	 * @param connectionFactory the connection factory to interrogate
	 * @return true if the connection factory represents an embedded database
	 * @since 2.5.1
	 */
	public static boolean isEmbedded(ConnectionFactory connectionFactory) {
		OptionsCapableConnectionFactory optionsCapable = OptionsCapableConnectionFactory.unwrapFrom(connectionFactory);
		Assert.notNull(optionsCapable,
				() -> "Cannot determine database's type as ConnectionFactory is not options-capable. To be "
						+ "options-capable, a ConnectionFactory should be created with "
						+ ConnectionFactoryBuilder.class.getName());
		ConnectionFactoryOptions options = optionsCapable.getOptions();
		for (EmbeddedDatabaseConnection candidate : values()) {
			if (candidate.embedded.test(options)) {
				return true;
			}
		}
		return false;

	}

}
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "isEmbedded(io.r2dbc.spi.ConnectionFactory)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

15:43:11.879 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
15:43:11.879 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public static boolean isEmbedded(ConnectionFactory connectionFactory) {
      OptionsCapableConnectionFactory optionsCapable = OptionsCapableConnectionFactory.unwrapFrom(connectionFactory);
      if (optionsCapable == null) {
          throw new IllegalArgumentException(
                  "Cannot determine database's type as ConnectionFactory is not options-capable. To be "
                  + "options-capable, a ConnectionFactory should be created with "
                  + ConnectionFactoryBuilder.class.getName());
      }
      ConnectionFactoryOptions options = optionsCapable.getOptions();
      for (EmbeddedDatabaseConnection candidate : values()) {
          if (candidate.embedded.test(options)) {
              return true;
          }
      }
      return false;
  }
  ```
    ]]>
  </code>
</response>
15:43:11.880 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public static boolean isEmbedded(ConnectionFactory connectionFactory) {
      OptionsCapableConnectionFactory optionsCapable = OptionsCapableConnectionFactory.unwrapFrom(connectionFactory);
      if (optionsCapable == null) {
          throw new IllegalArgumentException(
                  "Cannot determine database's type as ConnectionFactory is not options-capable. To be "
                  + "options-capable, a ConnectionFactory should be created with "
                  + ConnectionFactoryBuilder.class.getName());
      }
      ConnectionFactoryOptions options = optionsCapable.getOptions();
      for (EmbeddedDatabaseConnection candidate : values()) {
          if (candidate.embedded.test(options)) {
              return true;
          }
      }
      return false;
  }
  ```
    ]]>
  </code>
</response>
15:43:11.881 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
public static boolean isEmbedded(ConnectionFactory connectionFactory) {
      OptionsCapableConnectionFactory optionsCapable = OptionsCapableConnectionFactory.unwrapFrom(connectionFactory);
      if (optionsCapable == null) {
          throw new IllegalArgumentException(
                  "Cannot determine database's type as ConnectionFactory is not options-capable. To be "
                  + "options-capable, a ConnectionFactory should be created with "
                  + ConnectionFactoryBuilder.class.getName());
      }
      ConnectionFactoryOptions options = optionsCapable.getOptions();
      for (EmbeddedDatabaseConnection candidate : values()) {
          if (candidate.embedded.test(options)) {
              return true;
          }
      }
      return false;
  }
