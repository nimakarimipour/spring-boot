====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression context is @Nullable'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationAotProcessor.java:114
								+ context.getClass().getName());
Log:
15:37:10.644 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
15:37:10.644 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
15:37:10.645 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
15:37:10.645 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
15:37:10.645 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
4 : TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression context is @Nullable'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationAotProcessor.java:114
								+ context.getClass().getName());
15:37:18.642 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression context is @Nullable".
The line with the error is: "								+ context.getClass().getName());".

The error is within "the method: run(org.springframework.util.function.ThrowingSupplier)" and the code surrounding the error is:
```java
		public SpringApplicationRunListener getRunListener(SpringApplication application) {
			return new SpringApplicationRunListener() {

				@Override
				public void contextLoaded(ConfigurableApplicationContext context) {
					throw new AbandonedRunException(context);
				}

			};
		}

		@Nullable
		private <T> GenericApplicationContext run(ThrowingSupplier<T> action) {
			try {
				SpringApplication.withHook(this, action);
			}
			catch (AbandonedRunException ex) {
				ApplicationContext context = ex.getApplicationContext();
				Assert.isInstanceOf(GenericApplicationContext.class, context,
						() -> "AOT processing requires a GenericApplicationContext but got a "
								+ context.getClass().getName());
				return (GenericApplicationContext) context;
			}
			throw new IllegalStateException(
					"No application context available after calling main method of '%s'. Does it run a SpringApplication?"
							.formatted(this.application.getName()));
		}

	}

}
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "run(org.springframework.util.function.ThrowingSupplier)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

15:37:18.643 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
15:37:18.643 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
Here is the fixed code snippet:

```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private <T> GenericApplicationContext run(ThrowingSupplier<T> action) {
      try {
          SpringApplication.withHook(this, action);
      }
      catch (AbandonedRunException ex) {
          ApplicationContext context = ex.getApplicationContext();
          Assert.isInstanceOf(GenericApplicationContext.class, context,
                  () -> "AOT processing requires a GenericApplicationContext but got a "
                          + (context != null ? context.getClass().getName() : "null"));
          return (GenericApplicationContext) context;
      }
      throw new IllegalStateException(
              "No application context available after calling main method of '%s'. Does it run a SpringApplication?"
                      .formatted(this.application.getName()));
  }
  ```
    ]]>
  </code>
</response>
```
15:37:18.644 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
Here is the fixed code snippet:

```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private <T> GenericApplicationContext run(ThrowingSupplier<T> action) {
      try {
          SpringApplication.withHook(this, action);
      }
      catch (AbandonedRunException ex) {
          ApplicationContext context = ex.getApplicationContext();
          Assert.isInstanceOf(GenericApplicationContext.class, context,
                  () -> "AOT processing requires a GenericApplicationContext but got a "
                          + (context != null ? context.getClass().getName() : "null"));
          return (GenericApplicationContext) context;
      }
      throw new IllegalStateException(
              "No application context available after calling main method of '%s'. Does it run a SpringApplication?"
                      .formatted(this.application.getName()));
  }
  ```
    ]]>
  </code>
</response>
```
15:37:18.645 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
private <T> GenericApplicationContext run(ThrowingSupplier<T> action) {
      try {
          SpringApplication.withHook(this, action);
      }
      catch (AbandonedRunException ex) {
          ApplicationContext context = ex.getApplicationContext();
          Assert.isInstanceOf(GenericApplicationContext.class, context,
                  () -> "AOT processing requires a GenericApplicationContext but got a "
                          + (context != null ? context.getClass().getName() : "null"));
          return (GenericApplicationContext) context;
      }
      throw new IllegalStateException(
              "No application context available after calling main method of '%s'. Does it run a SpringApplication?"
                      .formatted(this.application.getName()));
  }
