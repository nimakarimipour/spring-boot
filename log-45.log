====================
Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/DefaultBindConstructorProvider.java:153
					return null;
Log:
15:45:30.023 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
15:45:30.023 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
15:45:30.023 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
15:45:30.023 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
15:45:30.023 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
45 : TOP LEVEL CALL TO FIX ERROR: Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/DefaultBindConstructorProvider.java:153
					return null;
15:45:37.792 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "RETURN_NULLABLE" and the full error message is: "returning @Nullable expression from method with @NonNull return type".
The line with the error is: "					return null;".

The error is within "the method: deduceBindConstructor(java.lang.Class,java.lang.reflect.Constructor[])" and the code surrounding the error is:
```java

		private static Constructor<?> getConstructorBindingAnnotated(Class<?> type, Constructor<?>[] candidates,
				MergedAnnotations[] mergedAnnotations) {
			Constructor<?> result = null;
			for (int i = 0; i < candidates.length; i++) {
				if (mergedAnnotations[i].isPresent(ConstructorBinding.class)) {
					Assert.state(candidates[i].getParameterCount() > 0,
							() -> type.getName() + " declares @ConstructorBinding on a no-args constructor");
					Assert.state(result == null,
							() -> type.getName() + " has more than one @ConstructorBinding constructor");
					result = candidates[i];
				}
			}
			return result;

		}

		private static Constructor<?> deduceBindConstructor(Class<?> type, Constructor<?>[] candidates) {
			if (candidates.length == 1 && candidates[0].getParameterCount() > 0) {
				if (type.isMemberClass() && Modifier.isPrivate(candidates[0].getModifiers())) {
					return null;
				}
				return candidates[0];
			}
			Constructor<?> result = null;
			for (Constructor<?> candidate : candidates) {
				if (!Modifier.isPrivate(candidate.getModifiers())) {
					if (result != null) {
						return null;
					}
					result = candidate;
				}
			}
			return (result != null && result.getParameterCount() > 0) ? result : null;
		}

		private static boolean isKotlinType(Class<?> type) {
			return KotlinDetector.isKotlinPresent() && KotlinDetector.isKotlinType(type);
		}

```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "deduceBindConstructor(java.lang.Class,java.lang.reflect.Constructor[])") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

15:45:37.792 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Sending request to OpenAI...
15:45:41.475 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private static Constructor<?> deduceBindConstructor(Class<?> type, Constructor<?>[] candidates) {
      if (candidates.length == 1 && candidates[0].getParameterCount() > 0) {
          if (type.isMemberClass() && Modifier.isPrivate(candidates[0].getModifiers())) {
              throw new IllegalStateException(type.getName() + " has a private no-arg constructor in a member class");
          }
          return candidates[0];
      }
      Constructor<?> result = null;
      for (Constructor<?> candidate : candidates) {
          if (!Modifier.isPrivate(candidate.getModifiers()) && candidate.getParameterCount() > 0) {
              if (result != null) {
                  throw new IllegalStateException(type.getName() + " has more than one accessible constructor with parameters");
              }
              result = candidate;
          }
      }
      if (result == null) {
          throw new IllegalStateException(type.getName() + " has no visible constructor with parameters");
      }
      return result;
  }
  ```
    ]]>
  </code>
</response>
```
15:45:41.477 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private static Constructor<?> deduceBindConstructor(Class<?> type, Constructor<?>[] candidates) {
      if (candidates.length == 1 && candidates[0].getParameterCount() > 0) {
          if (type.isMemberClass() && Modifier.isPrivate(candidates[0].getModifiers())) {
              throw new IllegalStateException(type.getName() + " has a private no-arg constructor in a member class");
          }
          return candidates[0];
      }
      Constructor<?> result = null;
      for (Constructor<?> candidate : candidates) {
          if (!Modifier.isPrivate(candidate.getModifiers()) && candidate.getParameterCount() > 0) {
              if (result != null) {
                  throw new IllegalStateException(type.getName() + " has more than one accessible constructor with parameters");
              }
              result = candidate;
          }
      }
      if (result == null) {
          throw new IllegalStateException(type.getName() + " has no visible constructor with parameters");
      }
      return result;
  }
  ```
    ]]>
  </code>
</response>
```
15:45:41.477 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
private static Constructor<?> deduceBindConstructor(Class<?> type, Constructor<?>[] candidates) {
      if (candidates.length == 1 && candidates[0].getParameterCount() > 0) {
          if (type.isMemberClass() && Modifier.isPrivate(candidates[0].getModifiers())) {
              throw new IllegalStateException(type.getName() + " has a private no-arg constructor in a member class");
          }
          return candidates[0];
      }
      Constructor<?> result = null;
      for (Constructor<?> candidate : candidates) {
          if (!Modifier.isPrivate(candidate.getModifiers()) && candidate.getParameterCount() > 0) {
              if (result != null) {
                  throw new IllegalStateException(type.getName() + " has more than one accessible constructor with parameters");
              }
              result = candidate;
          }
      }
      if (result == null) {
          throw new IllegalStateException(type.getName() + " has no visible constructor with parameters");
      }
      return result;
  }
15:45:41.477 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Cached response
