====================
Type='NONNULL_FIELD_READ_BEFORE_INIT', message='read of @NonNull field applicationContext before initialization'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java:70
		this.registry = (BeanDefinitionRegistry) this.applicationContext.getAutowireCapableBeanFactory();
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='NONNULL_FIELD_READ_BEFORE_INIT', message='read of @NonNull field applicationContext before initialization'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java:70
		this.registry = (BeanDefinitionRegistry) this.applicationContext.getAutowireCapableBeanFactory();
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "NONNULL_FIELD_READ_BEFORE_INIT" and the full error message is: "read of @NonNull field applicationContext before initialization".
The line with the error is: "		this.registry = (BeanDefinitionRegistry) this.applicationContext.getAutowireCapableBeanFactory();".

The error is within "the method: afterPropertiesSet()" and the code surrounding the error is:
```java
	 * The bean name that this post-processor is registered with.
	 */
	public static final String BEAN_NAME = ConfigurationPropertiesBindingPostProcessor.class.getName();

	private ApplicationContext applicationContext;

	private BeanDefinitionRegistry registry;

	private ConfigurationPropertiesBinder binder;

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.applicationContext = applicationContext;
	}

	@Initializer
	@Override
	public void afterPropertiesSet() throws Exception {
		// We can't use constructor injection of the application context because
		// it causes eager factory bean initialization
		this.registry = (BeanDefinitionRegistry) this.applicationContext.getAutowireCapableBeanFactory();
		this.binder = ConfigurationPropertiesBinder.get(this.applicationContext);
	}

	@Override
	public int getOrder() {
		return Ordered.HIGHEST_PRECEDENCE + 1;
	}

	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
		bind(ConfigurationPropertiesBean.get(this.applicationContext, bean, beanName));
		return bean;
	}

	private void bind(ConfigurationPropertiesBean bean) {
		if (bean == null || hasBoundValueObject(bean.getName())) {
			return;
		}
		Assert.state(bean.getBindMethod() == BindMethod.JAVA_BEAN, "Cannot bind @ConfigurationProperties for bean '"
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "afterPropertiesSet()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Initializer
  @Override
  public void afterPropertiesSet() throws Exception {
      if (this.applicationContext == null) {
          throw new IllegalStateException("ApplicationContext has not been initialized");
      }
      this.registry = (BeanDefinitionRegistry) this.applicationContext.getAutowireCapableBeanFactory();
      this.binder = ConfigurationPropertiesBinder.get(this.applicationContext);
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
@Initializer
  @Override
  public void afterPropertiesSet() throws Exception {
      if (this.applicationContext == null) {
          throw new IllegalStateException("ApplicationContext has not been initialized");
      }
      this.registry = (BeanDefinitionRegistry) this.applicationContext.getAutowireCapableBeanFactory();
      this.binder = ConfigurationPropertiesBinder.get(this.applicationContext);
  }
