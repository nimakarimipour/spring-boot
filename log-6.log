====================
Type='ASSIGN_FIELD_NULLABLE', message='assigning @Nullable expression to @NonNull field'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java:282
		this.mainApplicationClass = deduceMainApplicationClass();
Log:
15:37:36.822 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
15:37:36.822 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
15:37:36.822 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
15:37:36.822 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
15:37:36.822 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
6 : TOP LEVEL CALL TO FIX ERROR: Type='ASSIGN_FIELD_NULLABLE', message='assigning @Nullable expression to @NonNull field'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java:282
		this.mainApplicationClass = deduceMainApplicationClass();
15:37:45.106 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "ASSIGN_FIELD_NULLABLE" and the full error message is: "assigning @Nullable expression to @NonNull field".
The line with the error is: "		this.mainApplicationClass = deduceMainApplicationClass();".

The error is within "the method: SpringApplication(org.springframework.core.io.ResourceLoader,java.lang.Class[])" and the code surrounding the error is:
```java
	/**
	 * Create a new {@link SpringApplication} instance. The application context will load
	 * beans from the specified primary sources (see {@link SpringApplication class-level}
	 * documentation for details). The instance can be customized before calling
	 * {@link #run(String...)}.
	 * @param resourceLoader the resource loader to use
	 * @param primarySources the primary bean sources
	 * @see #run(Class, String[])
	 * @see #setSources(Set)
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SpringApplication(@Nullable ResourceLoader resourceLoader, Class<?>... primarySources) {
		this.resourceLoader = resourceLoader;
		Assert.notNull(primarySources, "PrimarySources must not be null");
		this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
		this.webApplicationType = WebApplicationType.deduceFromClasspath();
		this.bootstrapRegistryInitializers = new ArrayList<>(
				getSpringFactoriesInstances(BootstrapRegistryInitializer.class));
		setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
		this.mainApplicationClass = deduceMainApplicationClass();
	}

	@Nullable
	private Class<?> deduceMainApplicationClass() {
		return StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE).walk(this::findMainClass)
				.orElse(null);
	}

	private Optional<Class<?>> findMainClass(Stream<StackFrame> stack) {
		return stack.filter((frame) -> Objects.equals(frame.getMethodName(), "main")).findFirst()
				.map(StackWalker.StackFrame::getDeclaringClass);
	}

	/**
	 * Run the Spring application, creating and refreshing a new
	 * {@link ApplicationContext}.
	 * @param args the application arguments (usually passed from a Java main method)
	 * @return a running {@link ApplicationContext}
	 */
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "SpringApplication(org.springframework.core.io.ResourceLoader,java.lang.Class[])") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

15:37:45.107 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
15:37:45.107 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @SuppressWarnings({ "unchecked", "rawtypes" })
  public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
      this.resourceLoader = resourceLoader;
      Assert.notNull(primarySources, "PrimarySources must not be null");
      this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
      this.webApplicationType = WebApplicationType.deduceFromClasspath();
      this.bootstrapRegistryInitializers = new ArrayList<>(
              getSpringFactoriesInstances(BootstrapRegistryInitializer.class));
      setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
      setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
      this.mainApplicationClass = deduceMainApplicationClass();
      if (this.mainApplicationClass == null) {
          throw new IllegalStateException("Could not deduce main application class");
      }
  }
  ```
    ]]>
  </code>
</response>
```
15:37:45.108 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @SuppressWarnings({ "unchecked", "rawtypes" })
  public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
      this.resourceLoader = resourceLoader;
      Assert.notNull(primarySources, "PrimarySources must not be null");
      this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
      this.webApplicationType = WebApplicationType.deduceFromClasspath();
      this.bootstrapRegistryInitializers = new ArrayList<>(
              getSpringFactoriesInstances(BootstrapRegistryInitializer.class));
      setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
      setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
      this.mainApplicationClass = deduceMainApplicationClass();
      if (this.mainApplicationClass == null) {
          throw new IllegalStateException("Could not deduce main application class");
      }
  }
  ```
    ]]>
  </code>
</response>
```
15:37:45.109 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
@SuppressWarnings({ "unchecked", "rawtypes" })
  public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
      this.resourceLoader = resourceLoader;
      Assert.notNull(primarySources, "PrimarySources must not be null");
      this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
      this.webApplicationType = WebApplicationType.deduceFromClasspath();
      this.bootstrapRegistryInitializers = new ArrayList<>(
              getSpringFactoriesInstances(BootstrapRegistryInitializer.class));
      setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
      setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
      this.mainApplicationClass = deduceMainApplicationClass();
      if (this.mainApplicationClass == null) {
          throw new IllegalStateException("Could not deduce main application class");
      }
  }
