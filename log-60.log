====================
Type='ASSIGN_FIELD_NULLABLE', message='assigning @Nullable expression to @NonNull field'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java:57
		this.name = name;
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='ASSIGN_FIELD_NULLABLE', message='assigning @Nullable expression to @NonNull field'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationProperty.java:57
		this.name = name;
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "ASSIGN_FIELD_NULLABLE" and the full error message is: "assigning @Nullable expression to @NonNull field".
The line with the error is: "		this.name = name;".

The error is within "the method: ConfigurationProperty(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyName,java.lang.Object,org.springframework.boot.origin.Origin)" and the code surrounding the error is:
```java

	private final ConfigurationPropertyName name;

	private final Object value;

	@Nullable
	private final ConfigurationPropertySource source;

	@Nullable
	private final Origin origin;

	public ConfigurationProperty(ConfigurationPropertyName name, Object value, @Nullable Origin origin) {
		this(null, name, value, origin);
	}

	private ConfigurationProperty(@Nullable ConfigurationPropertySource source,
			@Nullable ConfigurationPropertyName name, Object value, @Nullable Origin origin) {
		Assert.notNull(name, "Name must not be null");
		Assert.notNull(value, "Value must not be null");
		this.source = source;
		this.name = name;
		this.value = value;
		this.origin = origin;
	}

	/**
	 * Return the {@link ConfigurationPropertySource} that provided the property or
	 * {@code null} if the source is unknown.
	 * @return the configuration property source
	 * @since 2.6.0
	 */
	@Nullable
	public ConfigurationPropertySource getSource() {
		return this.source;
	}

	/**
	 * Return the name of the configuration property.
	 * @return the configuration property name
	 */
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "ConfigurationProperty(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyName,java.lang.Object,org.springframework.boot.origin.Origin)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private ConfigurationProperty(ConfigurationPropertySource source,
             ConfigurationPropertyName name, Object value, Origin origin) {
      Assert.notNull(name, "Name must not be null");
      Assert.notNull(value, "Value must not be null");
      this.source = source;
      this.name = name != null ? name : ConfigurationPropertyName.of("default");
      this.value = value;
      this.origin = origin;
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
private ConfigurationProperty(ConfigurationPropertySource source,
             ConfigurationPropertyName name, Object value, Origin origin) {
      Assert.notNull(name, "Name must not be null");
      Assert.notNull(value, "Value must not be null");
      this.source = source;
      this.name = name != null ? name : ConfigurationPropertyName.of("default");
      this.value = value;
      this.origin = origin;
  }
