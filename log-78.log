====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression ((GroovyBeanDefinitionReader) this.groovyReader) is @Nullable'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java:167
			((GroovyBeanDefinitionReader) this.groovyReader).beans(loader.getBeans());
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression ((GroovyBeanDefinitionReader) this.groovyReader) is @Nullable'
/home/nima/Developer/nullness-benchmarks/spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java:167
			((GroovyBeanDefinitionReader) this.groovyReader).beans(loader.getBeans());
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression ((GroovyBeanDefinitionReader) this.groovyReader) is @Nullable".
The line with the error is: "			((GroovyBeanDefinitionReader) this.groovyReader).beans(loader.getBeans());".

The error is within "the method: load(java.lang.Class)" and the code surrounding the error is:
```java
		}
		if (source instanceof Resource resource) {
			load(resource);
			return;
		}
		if (source instanceof Package pack) {
			load(pack);
			return;
		}
		if (source instanceof CharSequence sequence) {
			load(sequence);
			return;
		}
		throw new IllegalArgumentException("Invalid source type " + source.getClass());
	}

	private void load(Class<?> source) {
		if (isGroovyPresent() && GroovyBeanDefinitionSource.class.isAssignableFrom(source)) {
			// Any GroovyLoaders added in beans{} DSL can contribute beans here
			GroovyBeanDefinitionSource loader = BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);
			((GroovyBeanDefinitionReader) this.groovyReader).beans(loader.getBeans());
		}
		if (isEligible(source)) {
			this.annotatedReader.register(source);
		}
	}

	private void load(Resource source) {
		if (source.getFilename().endsWith(".groovy")) {
			if (this.groovyReader == null) {
				throw new BeanDefinitionStoreException("Cannot load Groovy beans without Groovy on classpath");
			}
			this.groovyReader.loadBeanDefinitions(source);
		}
		else {
			if (this.xmlReader == null) {
				throw new BeanDefinitionStoreException("Cannot load XML bean definitions when XML support is disabled");
			}
			this.xmlReader.loadBeanDefinitions(source);
		}
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "load(java.lang.Class)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private void load(Class<?> source) {
      if (isGroovyPresent() && GroovyBeanDefinitionSource.class.isAssignableFrom(source)) {
          if (this.groovyReader == null) {
              throw new IllegalStateException("Groovy reader must be initialized to load Groovy beans.");
          }
          GroovyBeanDefinitionSource loader = BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);
          ((GroovyBeanDefinitionReader) this.groovyReader).beans(loader.getBeans());
      }
      if (isEligible(source)) {
          this.annotatedReader.register(source);
      }
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
private void load(Class<?> source) {
      if (isGroovyPresent() && GroovyBeanDefinitionSource.class.isAssignableFrom(source)) {
          if (this.groovyReader == null) {
              throw new IllegalStateException("Groovy reader must be initialized to load Groovy beans.");
          }
          GroovyBeanDefinitionSource loader = BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);
          ((GroovyBeanDefinitionReader) this.groovyReader).beans(loader.getBeans());
      }
      if (isEligible(source)) {
          this.annotatedReader.register(source);
      }
  }
